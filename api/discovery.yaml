openapi: 3.0.1
info:
  title: Discovery
  description: APIs that allow Vechicles and MECs to access the MEC Registry
  contact:
    name: 5GMETA
    url: https://5gmeta-project.eu/
    email: 5gmeta@vicomtech.org
  license:
    name: EUPL 1.2
    url: https://eupl.eu/1.2/en/
  version: 1.0.0
externalDocs:
  description: Find out more about 5GMETA
  url: https://5gmeta-project.eu/
servers:
  - url: https://5gmeta-platform.eu/discovery-api
  - url: http://5gmeta-platform.eu/discovery-api
tags:
- name: southbound services
  description: 5GMETA MEC's Southbound Services
- name: northbound services
  description: 5GMETA MEC's Northbound Services
paths:
  /mec/locations:
    get:
      tags:
      - southbound services
      summary: Get serving MEC servers with their locations
      operationId: get_mec_locations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MECLocationsList'
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
  /mec:
    get:
      tags:
      - southbound services
      summary: Get all serving MEC servers
      operationId: get_mecs
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MECInstanceList'
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
    post:
      tags:
      - southbound services
      summary: Register a MEC instance in the discovery service
      operationId: post_mec
      requestBody:
        description: MEC information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MECCreation'
        required: true
      responses:
        "200":
          description: Successful operation
          content: {}
        "404":
          description: No services found
          content: {}
        "405":
          description: Invalid input
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
  /mec/{mec_id}:
    get:
      tags:
      - southbound services
      summary: Get a serving MEC server
      operationId: get_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MECInstanceList'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
    delete:
      tags:
      - southbound services
      summary: Delete a MEC
      operationId: delete_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
  /mec/tile:
    get:
      tags:
      - southbound services
      summary: Get list of tiles
      operationId: get_tiles
      responses:
        "200":
          description: Successful operation
        "401":
          description: Invalid tile supplied
          content: {}
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller      
      
  /mec/tile/{tile}:
    get:
      tags:
      - southbound services
      summary: Find serving MEC in a tile
      operationId: get_mec_tile
      parameters:
      - name: tile
        in: path
        description: Tile to get serving MEC
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MECInstanceList'
        "401":
          description: Invalid tile supplied
          content: {}
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
  /mec/{mec_id}/tile/{tile}:
    post:
      tags:
      - southbound services
      summary: Add serving tile to a MEC intance
      operationId: post_tile_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tile
        in: path
        description: Tile to post
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: No services found
          content: {}
        "405":
          description: Invalid input
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
    delete:
      tags:
      - southbound services
      summary: Delete a serving tile from a MEC instance
      operationId: delete_tile_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tile
        in: path
        description: Tile to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "401":
          description: Invalid tile supplied
          content: {}
        "404":
          description: No services found
          content: {}
      x-openapi-router-controller: swagger_server.controllers.southbound_services_controller
  /mec/{mec_id}/nbservices:
    get:
      tags:
      - northbound services
      description: Get a northbound service information from a MEC
      operationId: get_nbservices_from_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NBService'
      x-openapi-router-controller: swagger_server.controllers.northbound_services_controller
    post:
      tags:
      - northbound services
      description: Add a northbound service information to a MEC
      operationId: add_nbservice_to_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NBService'
      responses:
        "200":
          description: Successful operation
          content: {}
      x-openapi-router-controller: swagger_server.controllers.northbound_services_controller
  /mec/{mec_id}/nbservices/{service_id}:
    get:
      tags:
      - northbound services
      description: Get a northbound service from a MEC
      operationId: get_nbservice_from_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: service_id
        in: path
        description: Service ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NBService'
      x-openapi-router-controller: swagger_server.controllers.northbound_services_controller
    delete:
      tags:
      - northbound services
      description: Delete a northbound service in a MEC
      operationId: delete_nbservice_in_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: service_id
        in: path
        description: Service ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content: {}
      x-openapi-router-controller: swagger_server.controllers.northbound_services_controller
    patch:
      tags:
      - northbound services
      description: Modify a northbound service in a MEC
      operationId: modify_nbservice_in_mec
      parameters:
      - name: mec_id
        in: path
        description: MEC ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: service_id
        in: path
        description: Service ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NBService'
      responses:
        "200":
          description: Successful operation
          content: {}
      x-openapi-router-controller: swagger_server.controllers.northbound_services_controller
components:
  schemas:
    MECCreation:
      type: object
      properties:
        name:
          type: string
        lat:
          type: string
        lng:
          type: string
        organization:
          type: string
        resources:
          type: object
          properties:
            memory:
              type: string
            cpu:
              type: string
            gpu:
              type: string
            storage:
              type: string
        sb_services:
          type: array
          items:
            $ref: '#/components/schemas/SBService'
        props:
          type: object
        geolocation:
          $ref: '#/components/schemas/GeolocationTileList'
      example:
        name: SanSebastian-MEC
        lat: "43.2922071"
        lng: "-1.987018,17"
        organization: Vicomtech
        resources:
          memory: "16"
          cpu: "12"
          gpu: "true"
          storage: 1000"
        sb_services:
        - service_name: message-broker
          description: Message Broker
          ip: "<ip>"
          port: "5673"
        - service_name: video-broker
          description: Video Stream Broker
          ip: "<ip>"
          port: "8443"
        - service_name: registration-api
          description: Registration API
          ip: "<ip>"
          port: "12346"
        props: {}
        geolocation:
        - tile-id: "0331110121011323"
        - tile-id: "0331110121023020"
      xml:
        name: MECInstance
    MECInstance:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lat:
          type: string
        lng:
          type: string
        organization:
          type: string
        resources:
          type: object
          properties:
            memory:
              type: string
            cpu:
              type: string
            gpu:
              type: string
            storage:
              type: string
        sb_services:
          type: array
          items:
            $ref: '#/components/schemas/SBService'
        props:
          type: object
        geolocation:
          type: array
          items:
            $ref: '#/components/schemas/GeolocationTileList'
      example:
        id: "1"
        name: SanSebastian-MEC
        organization: Vicomtech
        lat: "43.2922071"
        lng: "-1.987018,17"
        resources:
          memory: "16"
          cpu: "12"
          gpu: "true"
          storage: "1000"
        sb_services:
        - service_name: message-broker
          description: Message Broker
          ip: "<ip>"
          port: "5673"
        - service_name: video-broker
          description: Video Stream Broker
          ip: "<ip>"
          port: "8443"
        - service_name: registration-api
          description: Registration API
          ip: "<ip>"
          port: "12346"
        props: "{}"
        geolocation:
        - tile-id: "033111012101132312"
        - tile-id: "033111012102302012"
      xml:
        name: MECInstance
    MECLocation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lat:
          type: string
        lng:
          type: string
        organization:
          type: string
        geolocation:
          type: array
          items:
            $ref: '#/components/schemas/GeolocationTileList'
      example:
        id: "1"
        name: SanSebastian-MEC
        organization: Vicomtech
        geolocation:
        - tile-id: "033111012101132312"
        - tile-id: "033111012102302012"
      xml:
        name: MECInstance
    MECLocationsList:
      type: array
      items:
        $ref: '#/components/schemas/MECLocation'        
    MECInstanceList:
      type: array
      items:
        $ref: '#/components/schemas/MECInstance'
    SBService:
      title: SBService
      required:
      - description
      - ip
      - port
      - service_name
      type: object
      properties:
        service_name:
          type: string
          description: Name of the exposed service in the MEC
        ip:
          type: string
          description: IP of the service
          format: ipv4
        port:
          type: string
          description: Port of the service
        description:
          type: string
          description: Description of the service
        props:
          type: string
          description: JSON with extra information of the service
          format: json
      example:
        service_name: message-broker
        description: Message Broker
        ip: "<ip>"
        port: "5673"
        props: props
    NBService:
      title: NBService
      required:
      - ip
      - port
      - service_name
      type: object
      properties:
        service_name:
          type: string
          description: Name of the exposed service in the MEC
        ip:
          type: string
          description: IP of the service
          format: ipv4
        port:
          type: string
          description: Port of the service
        description:
          type: string
          description: Description of the service
        props:
          type: string
          description: JSON with extra information of the service
          format: json
      example:
        service_name: message-broker
        description: Message Broker
        ip: "<ip>"
        port: "61616"
        props: "{}"
    GeolocationTileList:
      type: array
      items:
        $ref: '#/components/schemas/GeolocationTile'
    GeolocationTile:
      type: object
      properties:
        zoom-level:
          type: integer
          default: 18
        tile-id:
          type: string
      xml:
        name: Geolocation
      example:
        tile-id: "033111012101132313"
        zoom-level: 18
  securitySchemes:
    "5gmeta_oauth2":
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://5gmeta-project.eu/oauth/dialog
          scopes:
            write:services: modify services
            read:services: read your services
      x-tokenInfoFunc: swagger_server.controllers.authorization_controller.check_5gmeta_oauth2
      x-scopeValidateFunc: swagger_server.controllers.authorization_controller.validate_scope_5gmeta_oauth2
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key
